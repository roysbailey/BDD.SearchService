// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BSS.SearchService.IntegrationTests.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "IntegrationTests")]
    public partial class SearchJobProfilesFeature : Xunit.IClassFixture<SearchJobProfilesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SearchJobProfiles.feature"
#line hidden
        
        public SearchJobProfilesFeature(SearchJobProfilesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchJobProfiles", "Feature: Locate Job Profiles - Search By Keyword\r\n\tIn order to locate job profile" +
                    "s I am interested in\r\n\tAs a Citizen\r\n\tI want to be able to search for job profil" +
                    "es by keyword", ProgrammingLanguage.CSharp, new string[] {
                        "IntegrationTests"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
            "n <Title>")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchJobProfiles")]
        [Xunit.TraitAttribute("Description", "Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
            "n <Title>")]
        public virtual void LocateJobProfiles_SearchByKeyword_ReturnsMatchingResultsWhenMatchedInTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
                    "n <Title>", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table1.AddRow(new string[] {
                        "Doctor",
                        "GP"});
            table1.AddRow(new string[] {
                        "Hospital Doctor",
                        "Bloke in a hospital"});
            table1.AddRow(new string[] {
                        "Keg Sniffer",
                        "drunkered"});
#line 10
 testRunner.Given("a set of job profiles as follows", ((string)(null)), table1, "Given ");
#line 15
 testRunner.When("I search for the keyword \"Doctor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("I should see \"2\" results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table2.AddRow(new string[] {
                        "Doctor",
                        "GP"});
            table2.AddRow(new string[] {
                        "Hospital Doctor",
                        "Bloke in a hospital"});
#line 17
 testRunner.And("the results should contain the following", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
            "n <AltTitle>")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchJobProfiles")]
        [Xunit.TraitAttribute("Description", "Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
            "n <AltTitle>")]
        public virtual void LocateJobProfiles_SearchByKeyword_ReturnsMatchingResultsWhenMatchedInAltTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
                    "n <AltTitle>", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table3.AddRow(new string[] {
                        "GP",
                        "Doctor"});
            table3.AddRow(new string[] {
                        "Bloke in a hospital",
                        "Hospital Doctor"});
            table3.AddRow(new string[] {
                        "Keg Sniffer",
                        "drunkered"});
#line 24
 testRunner.Given("a set of job profiles as follows", ((string)(null)), table3, "Given ");
#line 29
 testRunner.When("I search for the keyword \"Doctor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("I should see \"2\" results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table4.AddRow(new string[] {
                        "GP",
                        "Doctor"});
            table4.AddRow(new string[] {
                        "Bloke in a hospital",
                        "Hospital Doctor"});
#line 31
 testRunner.And("the results should contain the following", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
            "n both <Title> and <AltTitle>")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchJobProfiles")]
        [Xunit.TraitAttribute("Description", "Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
            "n both <Title> and <AltTitle>")]
        public virtual void LocateJobProfiles_SearchByKeyword_ReturnsMatchingResultsWhenMatchedInBothTitleAndAltTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Locate Job Profiles - Search By Keyword - returns matching results when matched i" +
                    "n both <Title> and <AltTitle>", ((string[])(null)));
#line 37
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table5.AddRow(new string[] {
                        "GP Doctor",
                        "Doctor"});
            table5.AddRow(new string[] {
                        "Doctor in a hospital",
                        "Hospital Doctor"});
            table5.AddRow(new string[] {
                        "Keg Sniffer",
                        "drunkered"});
#line 38
 testRunner.Given("a set of job profiles as follows", ((string)(null)), table5, "Given ");
#line 43
 testRunner.When("I search for the keyword \"Doctor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then("I should see \"2\" results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table6.AddRow(new string[] {
                        "GP Doctor",
                        "Doctor"});
            table6.AddRow(new string[] {
                        "Doctor in a hospital",
                        "Hospital Doctor"});
#line 45
 testRunner.And("the results should contain the following", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Locate Job Profiles - Search By Keyword - returns no matching results when keywor" +
            "ds do not match either <Title> and <AltTitle>")]
        [Xunit.TraitAttribute("FeatureTitle", "SearchJobProfiles")]
        [Xunit.TraitAttribute("Description", "Locate Job Profiles - Search By Keyword - returns no matching results when keywor" +
            "ds do not match either <Title> and <AltTitle>")]
        public virtual void LocateJobProfiles_SearchByKeyword_ReturnsNoMatchingResultsWhenKeywordsDoNotMatchEitherTitleAndAltTitle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Locate Job Profiles - Search By Keyword - returns no matching results when keywor" +
                    "ds do not match either <Title> and <AltTitle>", ((string[])(null)));
#line 50
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
            table7.AddRow(new string[] {
                        "GP Doctor",
                        "Doctor"});
            table7.AddRow(new string[] {
                        "Doctor in a hospital",
                        "Hospital Doctor"});
            table7.AddRow(new string[] {
                        "Keg Sniffer",
                        "drunkered"});
#line 51
 testRunner.Given("a set of job profiles as follows", ((string)(null)), table7, "Given ");
#line 56
 testRunner.When("I search for the keyword \"Plumber\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("I should see \"2\" results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "AlternativeTitle"});
#line 58
 testRunner.And("the results should contain the following", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SearchJobProfilesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SearchJobProfilesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
